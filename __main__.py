import os
import random
import datetime
import string
from logging import getLogger
from subprocess import Popen
from subprocess import PIPE

from telegram import Bot
from telegram import Update
from telegram import ParseMode
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram import ReplyKeyboardRemove
from telegram.ext import Updater
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler
from telegram.ext import Filters
from telegram.ext import CallbackQueryHandler

from echo.buttons import BUTTON_IMG, BUTTON_GIF, BUTTON_HELP
from echo.buttons import get_base_reply_keyboard
from echo.config import load_config
from settings.config import TG_TOKEN

# config = load_config()
# logger = getLogger(__name__)


# def debug_requests(f):
#     def inner(*args, **kwargs):
#         try:
#             logger.info("–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é {}".format(f.__name__))
#             return f(*args, **kwargs)
#         except Exception:
#             logger.exception("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {}".format(f.__name__))
#
#     return inner


path = os.path.dirname(os.path.abspath(__file__))
picfolder = os.path.join(path, "photo")
giffolder = os.path.join(path, "gif")

MAIN_LEFT = "main_left"
MAIN_RIGHT = "main_right"
MAIN_BOTTOM = "main_bottom"

TITLES = {
    MAIN_LEFT: "–ì–≥ üòÜ",
    MAIN_RIGHT: "–ë–æ—è–Ω üéπ",
    MAIN_BOTTOM: "–í–∞—Ç? üôÉ"
}


# –ü–æ–ª–æ–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
def base_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(TITLES[MAIN_LEFT], callback_data=MAIN_LEFT),
            InlineKeyboardButton(TITLES[MAIN_RIGHT], callback_data=MAIN_RIGHT),
        ],
        [
            InlineKeyboardButton(TITLES[MAIN_BOTTOM], callback_data=MAIN_BOTTOM)
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


# –î—ñ—ó –¥–ª—è –∫–Ω–æ–ø–æ–∫
# @debug_requests
def call_keyboard(bot: Bot, update: Update, **kwargs):
    if update.callback_query.data == MAIN_LEFT:
        bot.send_message(
            chat_id=update.effective_message.chat_id,
            text="–ß—å–æ—Ç–∫–æ üòé",
            reply_markup=get_base_reply_keyboard(), )
    elif update.callback_query.data == MAIN_RIGHT:
        bot.send_message(chat_id=update.effective_message.chat_id,
                         text='–°–∞–º –±–æ—è–Ω üòí',
                         reply_markup=get_base_reply_keyboard(), )
    elif update.callback_query.data == MAIN_BOTTOM:
        bot.send_message(
            chat_id=update.effective_message.chat_id,
            reply_markup=get_base_reply_keyboard(),
            text=(random.choice(["–¢–µ–ª–µ–ø–æ –¥–∂—É–±—ñ –æ–∫–æ–ø—Ç–æ—Ä—É?",
                                 "–ë–∞–∫–æ –±–∞–∫–æ –ø–∞–∫—É–ø–∞–∫–æ!!!",
                                 "–ö–æ–∫–æ–∫–æ –∫—É–ø–æ–∫—É–ø–æ!",
                                 "–õ–∞–ø–∞–Ω–µ—Ä–æ –∫—É–±–∞–∫—É–ø—É...",
                                 "–ê—Ä–∞—Ä–∞–∫–∞ –∫—É–ø–∞–Ω–∞–∫–∞ :)"])) + "\n(–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ –º–∞—Ä—Å—ñ–∞–Ω—Å—å–∫—ñ)")


# –ü–æ—á–∞—Ç–∫–æ–≤–µ –º–µ–Ω—é
# @debug_requests
def do_start(bot: Bot, update: Update):
    bot.send_photo(chat_id=update.message.chat_id, photo=open(path + '/start.jpg', 'rb'))
    bot.send_message(chat_id=update.message.chat_id,
                     text='–°–ª–∞–≤–∞ –ù—ñ–±—ñ—Ä—É! –†–µ–ø—Ç–∏–ª–æ—ñ–¥–∞–º –°–ª–∞–≤–∞!\n'
                          '–Æ–∑–∞–π –º–µ–Ω—é—à–∫—É Homosapien...',
                     reply_markup=get_base_reply_keyboard(), )


# @debug_requests
def do_echo(bot: Bot, update: Update):
    chat_id = update.message.chat_id
    text = update.message.text
    if text == BUTTON_GIF:
        return do_random_gif(bot=bot, update=update)
    elif text == BUTTON_IMG:
        return do_random_image(bot=bot, update=update)
    elif text == BUTTON_HELP:
        return do_help(bot=bot, update=update)
    else:
        bot.send_message(
            chat_id=chat_id,
            reply_markup=get_base_reply_keyboard(),
            text=(random.choice(["–¢–µ–ª–µ–ø–æ –¥–∂—É–±—ñ –æ–∫–æ–ø—Ç–æ—Ä—É? üëΩ",
                                 "–ë–∞–∫–æ –±–∞–∫–æ –ø–∞–∫—É–ø–∞–∫–æ!!! üëΩ",
                                 "–ö–æ–∫–æ–∫–æ –∫—É–ø–æ–∫—É–ø–æ! üëΩ",
                                 "–õ–∞–ø–∞–Ω–µ—Ä–æ –∫—É–±–∞–∫—É–ø—É... üëΩ",
                                 "–ê—Ä–∞—Ä–∞–∫–∞ –∫—É–ø–∞–Ω–∞–∫–∞ :) üëΩ"])) + "\n(–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ –º–∞—Ä—Å—ñ–∞–Ω—Å—å–∫—ñ) "
                                                               "\n\n–í–∞–ª—î—Ä–∫–∞ –Ω–µ —Ä–æ–∑—É–º—ñ—î..."
                                                               "\n–í–≤–µ–¥–∏ / –∞–±–æ —é–∑–∞–π –º–µ–Ω—é—à–∫—Éüëá"
        )


# –ú–µ–Ω—é –≤–∏–∫–ª–∏–∫—É –¥–æ–ø–æ–º–æ–≥–∏
# @debug_requests
def do_help(bot: Bot, update: Update):
    bot.send_photo(chat_id=update.message.chat_id, photo=open(path + '/help.jpg', 'rb'))
    bot.send_message(chat_id=update.message.chat_id,
                     text='–©–æ –Ω–µ —Å–ø—Ä–∞–≤–∏–≤—Å—è? üò®\n\n'
                          '–Ω—É –¥–∏–≤–∏—Å—å —â–æ –º–æ–∂–Ω–∞:\n'
                          '/start - –ø—Ä–∏–≤—ñ—Ç–∞—é\n'
                          '/help - —Ç–∏ –≤–∂–µ —ñ —Ç–∞–∫ —Ç—É—Ç\n'
                     # '/poshuti - —Ç–µ–∫—Å—Ç–æ–≤–æ—á–∫–∏ –∑ –ù—ñ–±—ñ—Ä—É\n'
                          '/poshutipic - –ö–æ—Å–º–æ–ø—ñ–∫—á–∞\n'
                          '/poshutigif - –ê–Ω—ñ–º–∞–π–∫–∞\n\n',
                     # '–ê–±–æ —é–∑–∞–π –º–µ–Ω—é—à–∫—É Homosapien...',
                     reply_markup=get_base_reply_keyboard(), )


# –†–∞–Ω–¥–æ–º–Ω–∞ —à—É—Ç–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞
# @debug_requests
def do_random_image(bot: Bot, update: Update):
    files = os.listdir(picfolder)
    mem = str(random.choice(list(files)))

    bot.send_photo(chat_id=update.message.chat_id, photo=open(picfolder + '/' + mem, 'rb'),
                   reply_markup=base_keyboard(), )


# @debug_requests
def do_random_gif(bot: Bot, update: Update):
    files = os.listdir(giffolder)
    mem = str(random.choice(list(files)))

    bot.send_animation(chat_id=update.message.chat_id, animation=open(giffolder + '/' + mem, 'rb'),
                       reply_markup=base_keyboard(), )


# @debug_requests
def main():
    bot = Bot(
        token=TG_TOKEN,
    )
    updater = Updater(
        bot=bot,
    )

    start_handler = CommandHandler("start", do_start)
    echo_handler = MessageHandler(Filters.text, do_echo)
    help_handler = CommandHandler("help", do_help)
    random_image = CommandHandler("poshutipic", do_random_image)
    random_gif = CommandHandler("poshutigif", do_random_gif)
    buttons_handler = CallbackQueryHandler(callback=call_keyboard, pass_chat_data=True)

    updater.dispatcher.add_handler(start_handler)
    updater.dispatcher.add_handler(echo_handler)
    updater.dispatcher.add_handler(help_handler)
    updater.dispatcher.add_handler(random_image)
    updater.dispatcher.add_handler(random_gif)
    updater.dispatcher.add_handler(buttons_handler)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
